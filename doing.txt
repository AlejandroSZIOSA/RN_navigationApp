-Day 1
-Creating a screen component
-Create custom components
-Using Props
-This make a grid :)
 <FlatList 
      data={CATEGORIES} 
      keyExtractor={(item) => item.id}
      renderItem=  {renderCategoryItem}  
      numColumns={2} // here
    />
- <Pressable> use android_ripple={{color:'#ccc'}}property
-overflow:Platform.OS === 'android' ? 'hidden': 'visible'
- <View style={[styles.gridItem,{backgroundColor:color}]}>
-  <View style={[styles.innerContainer,{backgroundColor:color}]}>
- <Pressable 
    android_ripple={{color:'#ccc'}} 
    style={({pressed}) => [styles.button, pressed? styles.buttonPressed : null,
    ]}
>
- in app.json add "backgroundColor": "24180f",
-   <> //using statusbar 
          <StatusBar style = 'light'/>
          <CategoriesScreen/>
    </>
-Day 2
-npm install @react-navigation/native (install package)
-expo install react-native-screens react-native-safe-area-context (install package)
-expo install @react-navigation/native-stack
-navigation is a component
-<Stack.Screen 
              name="MealsCategories" 
              component={CategoriesScreen}
/> // name is an identificator
-Add extra Screens
-Nested functions in "CategoriesScreen" / entrenar
-Navigation can define a defau√∂lt screen .. and is the first child
- or 
<Stack.Navigator initialRouteName="ProductDetails">
  <Stack.Screen name="AllProducts" component={AllProducts} /> 
  <Stack.Screen name="ProductDetails" component={ProductDetails} /> // initial screen
</Stack.Navigator>

-Navigation passing objects as params (there is a navigation hook)
- "route" is a part of stack.screen so It can be used as param (there is a route hook)

-Day 3

-creating an Object with many Props and using inside a component . 
Because there are so many props

 <MealItem {...mealItemProps}