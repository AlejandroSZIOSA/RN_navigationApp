-Day 1
-Creating a screen component
-Create custom components
-Using Props
-This make a grid :)
 <FlatList 
      data={CATEGORIES} 
      keyExtractor={(item) => item.id}
      renderItem=  {renderCategoryItem}  
      numColumns={2} // here
    />
- <Pressable> use android_ripple={{color:'#ccc'}}property
-overflow:Platform.OS === 'android' ? 'hidden': 'visible'
- <View style={[styles.gridItem,{backgroundColor:color}]}>
-  <View style={[styles.innerContainer,{backgroundColor:color}]}>
- <Pressable 
    android_ripple={{color:'#ccc'}} 
    style={({pressed}) => [styles.button, pressed? styles.buttonPressed : null,
    ]}
>
- in app.json add "backgroundColor": "24180f",
-   <> //using statusbar 
          <StatusBar style = 'light'/>
          <CategoriesScreen/>
    </>
-Day 2
-npm install @react-navigation/native (install package)
-expo install react-native-screens react-native-safe-area-context (install package)
-expo install @react-navigation/native-stack
-navigation is a component
-<Stack.Screen 
              name="MealsCategories" 
              component={CategoriesScreen}
/> // name is an identificator
-Add extra Screens
-Nested functions in "CategoriesScreen" / entrenar
-Navigation can define a defau√∂lt screen .. and is the first child
- or 
<Stack.Navigator initialRouteName="ProductDetails">
  <Stack.Screen name="AllProducts" component={AllProducts} /> 
  <Stack.Screen name="ProductDetails" component={ProductDetails} /> // initial screen
</Stack.Navigator>

-Navigation passing objects as params (there is a navigation hook)
- "route" is a part of stack.screen so It can be used as param (there is a route hook)

-Day 3

-creating an Object with many Props and using inside a component . 
Because there are so many props

 <MealItem {...mealItemProps}
 -Ripple efect on android and opacity efect on IOS :)
 -Shadows 
 
 -Day 4 

 -Stack screen = options as object  (se the documentation)
 <Stack.Screen 
            name="MealsCategories" // id
            component={CategoriesScreen}//conecting to a screen . passing navigation ?
            options= {{
              title:'Meals'
            }}
  />
  -Default screen options style navigation bar for all screens 
  <Stack.Navigator screenOptions={{
            headerStyle: {backgroundColor:'#351401'},
            headerTintColor:'white',
            contentStyle:{backgroundColor:'#3f2f25'} //content background
  }}>
  - options as function :) 
  options={({route, navigation}) => {
              const catId = route.params.categoryId;// in MealsOverviewScreen
              return{
                title:catId
              };
            }}

-Usefect fix the warning problem
useEffect(()=> {
    //filter CATEGORIES array list
    const categoryTitle = CATEGORIES.find((category)=>category.id === catId).title;
    
    navigation.setOptions({
            title:categoryTitle
        })// navigation options
    },[catId,navigation]);

-UseLoyaut ? render simultanius when component renders :)
-Day 5
-useNavigation
import { useNavigation } from "@react-navigation/native";
-styling MealDetailScreen
-Using a regular list for render Ingredients (This do not need a flatList)
 <Text> Ingredients </Text>
        {selectedMeal.ingredients.map(ingredient=> 
            <Text key={ingredient}> {ingredient}</Text>)}
-day 6
-Overraiding styles 
function MealDetails({duration,complexity,affordability,style, texStyle}){
    return(
    <View style={[styles.details,style]}>
        <Text style={[styles.detailItem,texStyle]}> {duration} m  </Text>
        <Text style={[styles.detailItem,texStyle]}> {complexity.toUpperCase()} </Text>
        <Text style={[styles.detailItem,texStyle]}> {affordability.toUpperCase()} </Text>
    </View>
- <View> acept borders not <Text>
-Making reusable cod
-day 7 
-Adding buttom to the navigation bar :) this way do whent do not need direct comunication 
with a component :)
 <Stack.Screen 
            name= "MealDetail" 
            component={MealDetailScreen}
            options={{
              headerRight: () => {
              return <Text> In the header</Text>
            }   
            }} />
- <Stack.Screen 
            name= "MealDetail" 
            component={MealDetailScreen}
            options={{
              headerRight: () => {
              return <Button title ='Tap me!'  />
            }   
            }} />

- Add button to navigation bar with more funtionality

useLayoutEffect(() => { 
        navigation.setOptions({
            headerRight:() => {
                return <Button title ='Tape me' onPress={headerButtonPressHandler} />
            }
        });
        //adding a dependecies
    },[navigation, headerButtonPressHandler]);
- creating a button component with icons :)

